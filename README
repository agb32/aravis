
We are ready on our end for the remote Aravis testing on our controller.
Here some technical info that should be useful for you:

"The OS is Ubuntu 12.04 LTS and is fully up-to-date.

The installed VNC server is x11vnc and we have successfully connected with
sshvnc from another Ubuntu 12.04 machine.

The way we want to proceed is to set up ssh remote port-forwarding.  
For this, we require ssh access to your machine.  We will set up a port by
running
       ssh -C -R 5950:localhost:5900 -l <username> <host>
where <username> and <host> are for your machine.  You will need to set
these up for us.
Once this is done you can access the virtual machine here with a vnc viewer 
on your machine by connecting to 'localhost:50’

Similarly, we will provide an ssh tunnel which you will be able to access
via :
        ssh -p <port> -l guest-admin localhost
where we should agree on a port.  

For paranoia’s sake we will communicate the ssh passwords via telephone.

As user guest-admin you will have access to root privileges via sudo.

The ethernet port for the controller will be 'eth2'. “


You will be connected on one of our EMCCD controller and we will provide you
with some basic serial command.

Let us know if you need anything else and when you would be available to
begin de testing.




You will be connected to a controller without CCD, which means the images
you will be acquiring will only consists of electronic noise. The images you
will receive will have 136 x 134 pixels plus 2 overscan lines.

All of the information I sent you before is accurate, except that the
Ethernet interface for the controller is ‘eth1’.  You might also want to
know that the controller’s GigE interface has IP address 169.254.138.130 on
subnet mask 255.255.0.0

The tunnel to your ssh into our machine is available at port 2230 on your
localhost. The password is: n3w~Nu4u

As discussed, the commands you should send (as ASCII characters) over the
serial connection should be :

'msg [string]’ where the argument [string] is returned

‘ld 1’ which will load a readout mode and in the process return certain
parameters relating to the readout mode

‘re 1’ will cause the controller to return a single image

‘re -1’ will cause the controller to return images continuously

‘abort’ will cause the controller to stop sending images

Hopefully, everything will go well tomorrow morning and you won't need my
help. I will check my emails first thing in the morning.



BPP:
=======
Aravis
======

Aravis is a glib/gobject based library for video acquisition using Genicam cameras. It currently only implements an ethernet camera protocol used for industrial cameras.

Aravis is released under the LGPL v2+.

Links
=====

    Mailing list: aravis@freelists.org ( http://www.freelists.org/list/aravis )
    Releases: http://ftp.gnome.org/pub/GNOME/sources/aravis
    Git repository: http://git.gnome.org/cgit/aravis
    Bugzilla: https://bugzilla.gnome.org/browse.cgi?product=aravis
    Blog: http://blogs.gnome.org/emmanuel/category/aravis/
    Genicam standard : http://www.genicam.org


Also see docs/camAravis.tex

Works best with a dhcp server, so that cameras get assigned an IP address.

Things to install to get working... fedora (I think):
sudo yum install gstreamer-plugins-base-devel
sudo yum install libnotify-devel
sudo yum install gtk2-devel
sudo yum install gtk3-devel
sudo yum install gtk+-devel
sudo yum install gstreamer-devel
sudo yum install libxml2-devel
sudo yum install libxml2
sudo yum install libxml-devel
sudo yum install glibc-devel glib2-devel
sudo yum install gstreamer-0.10
sudo yum install gstreamer
sudo yum install glib2
sudo yum install intltool

fc20:
sudo yum install gstreamer-plugins-base-devel libnotify-devel gtk2-devel gtk3-devel gtk+-devel gstreamer-devel libxml2-devel libxml2 libxml-devel glibc-devel glib2-devel gstreamer-0.10 gstreamer glib2 intltool


Ubuntu: intltool gstreamer-0.10 libnotify-dev gtk+-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libgtk2.0-dev gstreamer0.10-plugins-bad

Also, maybe:  
gstreamer-tools

These, actually, not required:
gobject-introspection
gtk2.0-dev

./configure --enable-viewer
make
sudo make install
cd src
make -f Makefile.darc
cp libcamaravis.so /path/to/darc/lib/ #(eg /rtc/lib/ or /opt/darc/lib/)
arv-viewer



Set the networking:
ifconfig ethX mtu 9000  # X is the ethernet port with camera on it.
sysctl -w net.core.rmem_max=26214400 

Put into /etc/sysctl.conf:  (from myricom website)
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.core.netdev_max_backlog = 250000

Maybe also:
net.core.rmem_default =	4194304


Then use:
sysctl -p /etc/sysctl.conf

Possible options (with defaults for gpuserver shown):
net.ipv4.udp_mem = 579720	772963	1159440
net.ipv4.udp_rmem_min = 4096   # Maybe set to 16384?  Or 65536
net.ipv4.udp_wmem_min = 4096

And:
sysctl -w net.core.wmem_max=16777216
sysctl -w net.core.rmem_default=4194304

Other options: 
IRQ binding:
http://fasterdata.es.net/host-tuning/interrupt-binding/

Try: echo 0 > /proc/sys/net/ipv4/conf/eth2/rp_filter  (or ethX)
to disable reverse path filtering.
Set net.ipv4.conf.default.rp_filter=2  or 0?
eg :
echo 2 > /proc/sys/net/ipv4/conf/default/rp_filter  #(or 0?)
echo 2 > /proc/sys/net/ipv4/conf/all/rp_filter      #(or 0?)

dhcpd /etc/dhcp*/*.conf
/etc/defualt/isc-dhcp-server

Also - in camAravis - I now set the socket buffer to 16*npxls - so
that it has a large enough buffer to store them all.  In reality, for
large cameras it may get set to less than this if rmem_max is
smaller.  Also - might want to do something cleverer at some point to
reduce memory...


To change framerate etc... (bobcats)

arv-tool-0.2 control ProgFrameTimeEnable=true
arv-tool-0.2 control ProgFrameTimeAbs=100000 #to set exp in us.

PixelSize Bpp16


Full list of features can be obtained with arv-tool... (--help is friend!)

Doesn't work when viewer is running...

Other things to set are:

TriggerMode=On/Off
TriggerSource=TimerTrigger/External/Software
ExposureMode=Off/Timed/TriggerWidth (Not available)/IOExposureControl

AcquisitionMode=Continuous/SingleFrame


Various trigger options to test with external triggering.

ExposureTimeRaw

TriggerType=Standard/Fast/Double/Asynchronous/FrameAccumulation

Probably want standard.


GainRaw= an integer...
ExposureTimeRaw=  (not sure if works)



Access to pixel stream in arvgvstream.c...

arv_gv_stream_thread
Used in arv_gv_stream_new

Called in arvgvdevice.c function arv_gv_device_create_stream.
Which is called by arv_gv_device_class_init

But, this isn't called anywhere!



arvexample.c:

	camera = arv_camera_new (NULL);
		stream = arv_camera_create_stream (camera, NULL, NULL);
			g_signal_connect (stream, "new-buffer", G_CALLBACK (new_buffer_cb), &data);


arv_camear_create_stream has:
arv_device_create_stream which is in arvdevice.c
This calls the create_stream method of ArvDevice objects.

This is probably the arvgvdevice.c device_create_Stream object.

Can we do it without the g_signal_connect?  

The device_create_stream method calls arv_gv_stream_new, which is in
arvgvstream.c


Example in tests/arvcameracallbacktest.c

Multiple cameras...
I think need to look at GMainContext.

Probably g_main_context_push_thread_default ()


Problems on cpuserver after a reboot.  dhcpd wasn't configured
correctly - now fixed.
Imperx, inc.-110324   - bobcat2


Imperx, inc.-110323   - bobcat3


Test with tests/arv-camera-callback-test  [--name="Imprex, inc.-110323"]
tests/arv-multi-camera --name="Imperx, inc.-110323;Imperx, inc.-110324"

Works with 2 cameras, including setting of parameters... (though needs to close the stream to do this).


gcc -c arvmulticamera.c -I../src/ `pkg-config --cflags glib-2.0`
gcc -o arvmc   -L../src -pthread arvmulticamera.o ../src/arvbuffer.o               ../src/arvgcfloat.o ../src/arvcamera.o               ../src/arvgcgroupnode.o ../src/arvdebug.o                ../src/arvgcindexnode.o ../src/arvdevice.o               ../src/arvgcintegernode.o ../src/arvdomcharacterdata.o     ../src/arvgcinteger.o ../src/arvdomdocumentfragment.o  ../src/arvgcinvalidatornode.o ../src/arvdomdocument.o          ../src/arvgcnode.o ../src/arvdomelement.o           ../src/arvgc.o ../src/arvdomimplementation.o    ../src/arvgcport.o ../src/arvdomnamednodemap.o      ../src/arvgcpropertynode.o ../src/arvdomnodelist.o          ../src/arvgcregisterdescriptionnode.o ../src/arvdomnode.o              ../src/arvgcregisternode.o ../src/arvdomparser.o            ../src/arvgcregister.o ../src/arvdomtext.o              ../src/arvgcstring.o ../src/arvenums.o                ../src/arvgcstructentrynode.o ../src/arvenumtypes.o            ../src/arvgcswissknife.o ../src/arvevaluator.o            ../src/arvgcvariablenode.o           ../src/arvgvcp.o           ../src/arvgvdevice.o         ../src/arvgvinterface.o      ../src/arvgvsp.o            ../src/arvgvstream.o ../src/arvgcboolean.o            ../src/arvinterface.o ../src/arvgccategory.o           ../src/arvmisc.o ../src/arvgccommand.o            ../src/arvstream.o ../src/arvgcconverter.o          ../src/arvstr.o ../src/arvgcenumentry.o          ../src/arvsystem.o ../src/arvgcenumeration.o         ../src/arvgcfeaturenode.o   ../src/arvfakeinterface.o ../src/arvfakedevice.o  ../src/arvfakestream.o ../src/arvfakecamera.o  ../src/arvzip.o ../src/arvgcfloatnode.o  `pkg-config --cflags --libs dbus-1 dbus-glib-1  glib-2.0` -pthread -lgio-2.0 -lgobject-2.0 -lgmodule-2.0 -lxml2 -lgthread-2.0 -lrt -lglib-2.0 -lz -lm 


To install the darc module...:
Install the above dependencies, then:
./configure --enable-viewer
make
cd src
make -f Makefile.darc

If get the -fPIC warning, have to edit src/Makefile and add -fPIC to the cflags line.  Then do (in src/):
touch *.c
make
make -f Makefile.darc
make -f Makefile.darc install
cp ../conf/configBobcat2cam.py /rtc/conf

If you get an error, check that the config file is pointing to the 2 cameras you want to use...



FOR multicasting:
If it doesn't work out of the box, try the following settings
echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter 
echo 0 > /proc/sys/net/ipv4/conf/eth10/rp_filter 
echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
Or 2...
ifconfig eth10 promisc

For multicasting, in the config file, need to specify the multicast
address, and also whether you are the camera master (responsible for
setting everything up).  And, it should be that simple!
